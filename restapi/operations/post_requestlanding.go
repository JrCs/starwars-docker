package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostRequestlandingHandlerFunc turns a function with the right signature into a post requestlanding handler
type PostRequestlandingHandlerFunc func(PostRequestlandingParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostRequestlandingHandlerFunc) Handle(params PostRequestlandingParams) middleware.Responder {
	return fn(params)
}

// PostRequestlandingHandler interface for that can handle valid post requestlanding params
type PostRequestlandingHandler interface {
	Handle(PostRequestlandingParams) middleware.Responder
}

// NewPostRequestlanding creates a new http.Handler for the post requestlanding operation
func NewPostRequestlanding(ctx *middleware.Context, handler PostRequestlandingHandler) *PostRequestlanding {
	return &PostRequestlanding{Context: ctx, Handler: handler}
}

/*PostRequestlanding swagger:route POST /requestlanding postRequestlanding

Land a ship in the ship bay

*/
type PostRequestlanding struct {
	Context *middleware.Context
	Handler PostRequestlandingHandler
}

func (o *PostRequestlanding) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPostRequestlandingParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
