package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// HTTP code for type PutExhaustPortOK
const PutExhaustPortOKCode int = 200

/*PutExhaustPortOK OK

swagger:response putExhaustPortOK
*/
type PutExhaustPortOK struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewPutExhaustPortOK creates PutExhaustPortOK with default headers values
func NewPutExhaustPortOK() *PutExhaustPortOK {
	return &PutExhaustPortOK{}
}

// WithPayload adds the payload to the put exhaust port o k response
func (o *PutExhaustPortOK) WithPayload(payload string) *PutExhaustPortOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put exhaust port o k response
func (o *PutExhaustPortOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutExhaustPortOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// HTTP code for type PutExhaustPortServiceUnavailable
const PutExhaustPortServiceUnavailableCode int = 503

/*PutExhaustPortServiceUnavailable Deathstar exploded

swagger:response putExhaustPortServiceUnavailable
*/
type PutExhaustPortServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewPutExhaustPortServiceUnavailable creates PutExhaustPortServiceUnavailable with default headers values
func NewPutExhaustPortServiceUnavailable() *PutExhaustPortServiceUnavailable {
	return &PutExhaustPortServiceUnavailable{}
}

// WithPayload adds the payload to the put exhaust port service unavailable response
func (o *PutExhaustPortServiceUnavailable) WithPayload(payload string) *PutExhaustPortServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put exhaust port service unavailable response
func (o *PutExhaustPortServiceUnavailable) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutExhaustPortServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
